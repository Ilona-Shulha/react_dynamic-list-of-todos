{"version":3,"sources":["Api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["request","url","fetch","then","response","ok","Error","status","statusText","json","getUserInfo","num","TodoList","state","todosList","listFilter","completed","searchTodo","random","randomizer","arr","result","i","length","numRandom","Math","floor","getOnCompleted","setState","prev","filter","el","onSearch","title","includes","res","this","selectUser","props","arrForRender","className","name","value","onChange","e","target","type","onClick","map","htmlFor","id","readOnly","checked","item","userId","React","Component","CurrentUser","user","selectedUserId","email","phone","App","ReactDOM","render","document","getElementById"],"mappings":"gUAAaA,G,MAAU,SAACC,GACtB,OAAOC,MAAM,oCAAD,OAAqCD,IAC9CE,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,YAAgCH,EAASI,aAGjD,OAAOJ,EAASK,YAQTC,EAAc,SAACC,GAC1B,OAAOX,EAAQ,UAAD,OAAWW,K,OCCdC,EAAb,4MACEC,MAAe,CACbC,UAAW,GACXC,WAAY,GACZC,UAAW,MACXC,WAAY,GACZC,QAAQ,GANZ,EAiBEC,WAAa,SAACC,GAGZ,IAFA,IAAMC,EAASD,EAENE,EAAIF,EAAIG,OAAS,EAAGD,EAAI,EAAGA,GAAK,EAAG,CAC1C,IAAME,EAAYC,KAAKC,MAAMD,KAAKP,UAAYI,EAAI,IADR,EAGT,CAACD,EAAOG,GAAYH,EAAOC,IAA3DD,EAAOC,GAHkC,KAG9BD,EAAOG,GAHuB,KAM5C,OAAOH,GA1BX,EA6BEM,eAAiB,WACf,EAAKC,SAAS,CAAEV,QAAQ,IACxB,EAAKU,UAAS,SAACC,GACb,MAAO,CACLd,WAAYc,EAAKf,UAAUgB,QAAO,SAACC,GACjC,OAAQF,EAAKb,WACX,IAAK,SACH,OAAwB,IAAjBe,EAAGf,UACZ,IAAK,YACH,OAAOe,EAAGf,UACZ,QACE,OAAO,WAxCrB,EA+CEgB,SAAW,SAACZ,GAKV,OAJeA,EAAIU,QAAO,SAAAC,GACxB,OAAOA,EAAGE,MAAMC,SAAS,EAAKrB,MAAMI,gBAjD1C,uDASE,WAAqB,IAAD,ODdbjB,EAAQ,UCgBVG,MAAK,SAAAgC,GACJ,EAAKP,SAAS,CAAEd,UAAWqB,IAC3B,EAAKP,SAAS,CAAEb,WAAYoB,SAbpC,oBAuDE,WAAU,IAAD,OACP,EAEIC,KAAKvB,MADPG,EADF,EACEA,UAAWD,EADb,EACaA,WAAYE,EADzB,EACyBA,WAAYC,EADrC,EACqCA,OAE7BmB,EAAeD,KAAKE,MAApBD,WACFE,EAAgBrB,EAClBkB,KAAKjB,WAAWiB,KAAKJ,SAASjB,IAC9BqB,KAAKJ,SAASjB,GAElB,OACE,sBAAKyB,UAAU,WAAf,UACE,wCACA,yBACEC,KAAK,cACLC,MAAO1B,EACP2B,SAAU,SAACC,GACL5B,IAAc4B,EAAEC,OAAOH,QACzB,EAAKd,SAAS,CACZZ,UAAW4B,EAAEC,OAAOH,QAEtB,EAAKf,mBARX,UAYE,wBAAQe,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,0BAEF,uBACEI,KAAK,OACLJ,MAAOzB,EACP0B,SAAU,SAACC,GACT,EAAKhB,SAAS,CAAEX,WAAY2B,EAAEC,OAAOH,WAGzC,wBACEI,KAAK,SACLC,QAAS,WACP,EAAKnB,SAAS,CAAEV,QAAQ,KAH5B,uBAQA,qBAAKsB,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGD,EAAaS,KAAI,SAACjB,GAAD,OAChB,qBACES,UAAU,2CADZ,UAIE,wBAAOS,QAAO,UAAKlB,EAAGmB,IAAtB,UACE,uBACEJ,KAAK,WACLK,UAAQ,EACRC,QAASrB,EAAGf,UACZkC,GAAE,UAAKnB,EAAGmB,IACVP,SAAU,WACR,EAAKf,UAAS,SAACC,GACb,MAAO,CACLf,UAAWe,EAAKf,UAAUkC,KAAI,SAACK,GAK7B,OAJuBA,EAAKH,KAAOnB,EAAGmB,GAAhB,YAAC,eACdG,GADa,IACPrC,WAAYqC,EAAKrC,YAC5BqC,SAMV,EAAK1B,oBAGT,4BAAII,EAAGE,WAET,wBACEO,UAAU,iEAKVM,KAAK,SACLC,QAAS,WACPV,EAAWN,EAAGuB,SARlB,yBAWYvB,EAAGuB,YApCVvB,EAAGmB,kBAvGxB,GAA8BK,IAAMC,WCHvBC,G,MAAb,4MACE5C,MAAe,CACb6C,KAAM,IAFV,uDAKE,WAAqB,IAAD,OAClBhD,EAAY0B,KAAKE,MAAMqB,gBACpBxD,MAAK,SAAAgC,GAAG,OAAI,EAAKP,SAAS,CAAE8B,KAAMvB,SAPzC,gCAUE,SAAmBN,GAAc,IAAD,OAC1BO,KAAKE,MAAMqB,iBAAmB9B,EAAK8B,gBACrCjD,EAAY0B,KAAKE,MAAMqB,gBACpBxD,MAAK,SAAAgC,GAAG,OAAI,EAAKP,SAAS,CAAE8B,KAAMvB,SAb3C,oBAiBE,WAAU,IAAD,OACCuB,EAAStB,KAAKvB,MAAd6C,KAER,OACE,sBAAKlB,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SAAmC,wDAAyBkB,EAAKR,QAEjE,oBAAIV,UAAU,oBAAd,SAAmCkB,EAAKjB,OACxC,mBAAGD,UAAU,qBAAb,SAAmCkB,EAAKE,QACxC,mBAAGpB,UAAU,qBAAb,SAAmCkB,EAAKG,QACxC,wBACEf,KAAK,SACLN,UAAU,qBACVO,QAAS,kBAAM,EAAKT,MAAMD,WAAW,IAHvC,0BA3BR,GAAiCkB,IAAMC,YCJjCM,E,4MACJjD,MAAe,CACb8C,eAAgB,G,EAGlBtB,WAAa,SAAC1B,GACZ,EAAKiB,SAAS,CAAE+B,eAAgBhD,K,4CAGlC,WACE,IAAQgD,EAAmBvB,KAAKvB,MAAxB8C,eAER,OACE,sBAAKnB,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAUH,WAAYD,KAAKC,eAG7B,qBAAKG,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGmB,EACC,cAAC,EAAD,CACEA,eAAgBA,EAChBtB,WAAYD,KAAKC,aAEjB,8B,GAzBEkB,IAAMC,WAiCTM,ICxCfC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.82e61bb4.chunk.js","sourcesContent":["export const request = (url: string) => {\n  return fetch(`https://mate.academy/students-api${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status}-${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n\nexport const getUserInfo = (num: number) => {\n  return request(`/users/${num}`);\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport { getTodos } from '../../Api/api';\nimport { Todo } from '../../types/Todo';\n\ntype State = {\n  todosList: Todo[],\n  completed: string,\n  listFilter: Todo[],\n  searchTodo: string,\n  random: boolean\n};\n\ntype Props = {\n  selectUser: (num: number) => void\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todosList: [],\n    listFilter: [],\n    completed: 'all',\n    searchTodo: '',\n    random: false,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(res => {\n        this.setState({ todosList: res });\n        this.setState({ listFilter: res });\n      });\n  }\n\n  randomizer = (arr: Todo[]) => {\n    const result = arr;\n\n    for (let i = arr.length - 1; i > 0; i -= 1) {\n      const numRandom = Math.floor(Math.random() * (i + 1));\n\n      [result[i], result[numRandom]] = [result[numRandom], result[i]];\n    }\n\n    return result;\n  };\n\n  getOnCompleted = () => {\n    this.setState({ random: false });\n    this.setState((prev) => {\n      return {\n        listFilter: prev.todosList.filter((el: Todo) => {\n          switch (prev.completed) {\n            case 'active':\n              return el.completed === false;\n            case 'completed':\n              return el.completed;\n            default:\n              return true;\n          }\n        }),\n      };\n    });\n  };\n\n  onSearch = (arr: Todo[]) => {\n    const result = arr.filter(el => {\n      return el.title.includes(this.state.searchTodo);\n    });\n\n    return result;\n  };\n\n  render() {\n    const {\n      completed, listFilter, searchTodo, random,\n    } = this.state;\n    const { selectUser } = this.props;\n    const arrForRender = (random)\n      ? this.randomizer(this.onSearch(listFilter))\n      : this.onSearch(listFilter);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <select\n          name=\"todosSelect\"\n          value={completed}\n          onChange={(e) => {\n            if (completed !== e.target.value) {\n              this.setState({\n                completed: e.target.value,\n              });\n              this.getOnCompleted();\n            }\n          }}\n        >\n          <option value=\"all\">all</option>\n          <option value=\"active\">active</option>\n          <option value=\"completed\">completed</option>\n        </select>\n        <input\n          type=\"text\"\n          value={searchTodo}\n          onChange={(e) => {\n            this.setState({ searchTodo: e.target.value });\n          }}\n        />\n        <button\n          type=\"button\"\n          onClick={() => {\n            this.setState({ random: true });\n          }}\n        >\n          Randomize\n        </button>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {arrForRender.map((el: Todo) => (\n              <li\n                className=\"TodoList__item TodoList__item--unchecked\"\n                key={el.id}\n              >\n                <label htmlFor={`${el.id}`}>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={el.completed}\n                    id={`${el.id}`}\n                    onChange={() => {\n                      this.setState((prev) => {\n                        return {\n                          todosList: prev.todosList.map((item) => {\n                            const newTodoStatus = (item.id === el.id)\n                              ? { ...item, completed: !item.completed }\n                              : item;\n\n                            return newTodoStatus;\n                          }),\n                        };\n                      });\n                      this.getOnCompleted();\n                    }}\n                  />\n                  <p>{el.title}</p>\n                </label>\n                <button\n                  className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(el.userId);\n                  }}\n                >\n                  {`User #${el.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUserInfo } from '../../Api/api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedUserId: number,\n  selectUser: (num: number) => void\n};\n\ntype State = {\n  user: User\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: {},\n  };\n\n  componentDidMount() {\n    getUserInfo(this.props.selectedUserId)\n      .then(res => this.setState({ user: res }));\n  }\n\n  componentDidUpdate(prev: Props) {\n    if (this.props.selectedUserId !== prev.selectedUserId) {\n      getUserInfo(this.props.selectedUserId)\n        .then(res => this.setState({ user: res }));\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user.id}`}</span></h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear\"\n          onClick={() => this.props.selectUser(0)}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  selectUser = (num: number) => {\n    this.setState({ selectedUserId: num });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList selectUser={this.selectUser} />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                selectUser={this.selectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}